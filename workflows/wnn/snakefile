import pandas

num_workers = 4

assays = ['rna', 'atac']
cutoffs = {'rna': 0.01, 'atac': 0.05}

modalities = ['rna', 'atac', 'wnn']
covariates = ['leiden', 'pmi', 'age', 'brain_bank']
latent_keys = {'rna': 'X_scvi', 'atac': 'X_poissonvi'}

samples_list = '/data/CARD_singlecell/Brain_atlas/samples.332.20240809.csv'

samples = pandas.read_csv(samples_list)['sample'].tolist()
envs = {'autotune': 'envs/scvi-tune.yml', 'singlecell': 'envs/singlecell.yml', 'decoupler': 'envs/decoupler.yml', 'motifs': 'envs/motifs.yml'}

type_mapper = {'InN': ['5', '6', '11', '12'] , 'ExN': ['2', '7', '9', '10', '13'], 'OPC': ['4', '14'], 'Astro': ['1'], 'VC': ['8'], 'Oligo': ['0'], 'MG': ['3']}

celltypes = type_mapper.keys()


localrules: all


rule all:
    input:
        'output/leiden_wnn_celltype_motifs.csv'
        

rule create_mdata:
    input:
        rna='/data/CARD_singlecell/brain_atlas_rna/objects/03_merged_anndata_object.h5ad', 
        atac='/data/CARD_singlecell/brain_atlas_atac/objects/02_merged_anndata_object.h5ad'
    output:
        muon_object='objects/01_muon_object.h5mu'
    conda:
        envs['singlecell']
    resources:
        runtime=720, mem_mb=1000000, slurm_partition='largemem' 
    script:
        'scripts/main/make_mdata.py'

rule filter_features:
    input:
        muon_object='objects/01_muon_object.h5mu'
    output:
        anndata='objects/01_anndata_object_{assay}.h5ad'
    params:
        assay='{assay}',
        cutoff=lambda key: cutoffs[key.assay] 
    conda:
        envs['singlecell']
    resources:
        runtime=120, mem_mb=500000, slurm_partition='largemem'
    script:
        'scripts/main/filter_features.py'

rule autotune:
    input:
        anndata='objects/01_anndata_object_{assay}.h5ad'
    output:
        pickle='output/{assay}/model_autotune_parameters.pkl'
    conda:
        envs['autotune']
    threads:
        num_workers * 16
    resources:
        runtime=2880, disk_mb=500000, mem_mb=300000, gpu=4, gpu_model='v100x'
    script:
        'scripts/main/{wildcards.assay}_autotune.py'

rule model:
    input:
        anndata='objects/01_anndata_object_{assay}.h5ad',
        pickle='output/{assay}/model_autotune_parameters.pkl'
    output:
        model_history='output/{assay}/model_history.csv',
        anndata='objects/02_anndata_object_{assay}.h5ad'
    params:
        assay='{assay}',
        model_dir='models/{assay}',
        latent_key=lambda key: latent_keys[key.assay]
    conda:
        envs['singlecell']
    resources:
        runtime=2880, mem_mb=300000, gpu=1, gpu_model='v100x'
    script:
        'scripts/main/{wildcards.assay}_model.py'

rule model_history:
    input:
        model_history='output/{assay}/model_history.csv'
    output:
        plot_history='plots/{assay}_training_validation_metrics.png'
    conda:
        envs['singlecell']
    script:
        'scripts/main/plot_model_history.py'

rule neighbors:
    input:
        anndata='objects/02_anndata_object_{assay}.h5ad'
    output:
        anndata='objects/03_anndata_object_{assay}.h5ad'
    params:
        latent_key=lambda key: latent_keys[key.assay]
    conda:
        envs['singlecell']
    threads:
        num_workers
    resources:
        runtime=720, mem_mb=400000, slurm_partition='largemem'
    script:
        'scripts/main/neighbors_umap.py'

rule wnn:
    input:
        anndata=expand('objects/03_anndata_object_{assay}.h5ad', assay=assays)
    output:
        muon_object='objects/02_muon_object.h5mu'
    conda:
        envs['singlecell']
    resources:
        runtime=1440, mem_mb=1000000, slurm_partition='largemem'        
    script:
        'scripts/main/wnn.py'

rule leiden:
    input:
        muon_object='objects/02_muon_object.h5mu'
    output:
        muon_object='objects/03_muon_object.h5mu'
    params:
        resolution=0.3
    conda:
        envs['singlecell']
    threads:
        num_workers
    resources:
        runtime=720, mem_mb=600000, slurm_partition='largemem'        
    script:
        'scripts/main/clustering.py'

rule umap:
    input:
        muon_object='objects/03_muon_object.h5mu'
    output:
        muon_object='objects/04_muon_object.h5mu'
    conda:
        envs['singlecell']
    threads:
        num_workers
    resources:
        runtime=720, mem_mb=600000, slurm_partition='largemem'    
    script:
        'scripts/main/umap.py'

rule matrixplot:
    input:
        markers='input/pfc_marker_genes.csv',
        muon_object='objects/04_muon_object.h5mu'
    output:
        matrixplot='plots/matrixplot_leiden.png'
    params:
        plot_directory='plots/', group='leiden'
    conda:
        envs['singlecell']
    threads:
        num_workers 
    resources:
        runtime=720, mem_mb=600000, slurm_partition='largemem'        
    script:
        'scripts/main/make_matrixplot.py'

rule plot_clusters:
    input:
        muon_object='objects/04_muon_object.h5mu'
    output:
        umap='plots/umap_{mode}_celltype.png'
    params:
        modalities=modalities,
        plot_directory='plots/', 
        type_mapper=type_mapper
    conda:
        envs['singlecell']
    threads:
        num_workers
    resources:
        runtime=120, mem_mb=600000, slurm_partition='largemem'        
    script:
        'scripts/main/plot_clusters.py'
